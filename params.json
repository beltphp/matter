{"name":"Matter","tagline":"Proper object traversal.","body":"# Belt.`Matter`\r\n\r\n> Proper object traversal\r\n\r\nBelt.`Matter` is an utility library that makes working with JSON objects\r\na bit (actually a lot) more pleasant. It converts JSON strings, objects or\r\narrays to a proper tree structure that can be traversed without warnings or\r\nerrors.\r\n\r\n## Installation\r\n\r\nVia Composer.\r\n\r\n```shell\r\n$ composer require belt/matter\r\n```\r\n\r\n## Usage\r\n\r\nWhen we use JSON in PHP, we usually have to use the properties of the JSON\r\nobject. This is really nice and all, but it doesn't work when a property\r\ndoes not exist.\r\n\r\n```php\r\n$object = json_decode('{\"foo\":\"bar\",\"bar\":[1, 2, 3, 4]\",\"baz\":\"lorem ipsum\"}');\r\n$object->foo;       // \"bar\"\r\n$object->something; // BOOM!\r\n```\r\n\r\nWell, that's not really nice, is it? We have to put guards around everytime we\r\nwant to use a property.\r\n\r\nThis is where Matter comes in handy!\r\n\r\n```php\r\n// Before\r\n$object = json_decode('{\"foo\":\"bar\"}');\r\n$object->foo;       // \"bar\"\r\n$object->something; // BOOM!\r\n\r\n// After\r\nuse Belt\\Matter;\r\n\r\n$object = Matter::fromJson('{\"foo\":\"bar\"}');\r\n$object->get('foo')->get();         // \"bar\"\r\n$object->get('something')->get();   // null\r\n```\r\n\r\nWhat Matter does for you, is convert a given JSON string or value into a tree\r\nstructure. This allows you to request nodes from the tree without being afraid\r\nof errors/warnings that are thrown.\r\n\r\nYou can always access any value in the JSON object.\r\n\r\n```php\r\n$object = Matter::fromJson('{\"foo\":[1, 2, 3, 4],\"bar\":\"lorem\"}');\r\n$object->get('foo')->get(0)->get(); // 1\r\n$object->get('foo')->get(4)->get(); // null\r\n$object->get('bar')->get();         // \"lorem\"\r\n\r\n$object = Matter::fromJson('[{\"name\":\"Alice\"},{\"name\":\"Bob\"}]');\r\n$object->get(0)->get('name')->get(); // \"Alice\"\r\n$object->get(1)->get('name')->get(); // \"Bob\"\r\n$object->get(2)->get('name')->get(); // null\r\n```\r\n\r\nEach Matter node also implements `ArrayAccess`, so that allows you to work\r\neven faster!\r\n\r\n```php\r\n$object = Matter::fromJson('[{\"name\":\"Alice\"},{\"name\":\"Bob\"}]');\r\n$object[0]['name']->get(); // \"Alice\"\r\n$object[1]['name']->get(); // \"Bob\"\r\n$object[2]['name']->get(); // null\r\n```\r\n\r\nAdditionally, you can also safely access properties of the object without having\r\nto use get to retrieve the property node.\r\n\r\n```php\r\n$object = Matter::fromJson('{\"foo\":{\"bar\":{\"baz\":42}}}');\r\n$object->foo->bar->baz->get(); // 42\r\n$object->baz->bar->foo->get(); // null\r\n```\r\n\r\n## Contributing\r\n\r\nPlease see [CONTRIBUTING](https://github.com/beltphp/matter/blob/master/CONTRIBUTING.md).\r\n\r\n## License\r\n\r\nPlease see [LICENSE](https://github.com/beltphp/matter/blob/master/LICENSE).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}